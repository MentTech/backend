// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  password    String
  name        String?
  role        Role        @default(MENTEE)
  birthday    DateTime?
  phone       String?
  avatar      String?
  isActive    Boolean     @default(true)
  coin        Int         @default(0)
  User_mentor UserMentor?
  createAt    DateTime    @default(now())
}

model UserMentor {
  userId       Int               @id
  User         User              @relation(fields: [userId], references: [id])
  degree       Degree[]
  experiences  Experience[]
  linkedin     String?
  jobs         Job[]
  achievements Achievement[]
  skills       SkillsOnMentors[]
  categoryId   Int
  category     Category          @relation(fields: [categoryId], references: [id])
  introduction String
  rating       Decimal           @default(0)
  isAccepted   Boolean           @default(false)
  createAt     DateTime          @default(now())
}

model Experience {
  id          Int        @id @default(autoincrement())
  mentorId    Int
  mentor      UserMentor @relation(fields: [mentorId], references: [userId])
  title       String
  company     String
  description String?
  startAt     DateTime
  endAt       DateTime?
  createAt    DateTime   @default(now())
}

model Degree {
  id          Int        @id @default(autoincrement())
  mentorId    Int
  mentor      UserMentor @relation(fields: [mentorId], references: [userId])
  title       String
  issuer      String
  description String?
  degreeId    String?
  url         String?
  startAt     DateTime
  endAt       DateTime?
  expiredAt   DateTime?
  createAt    DateTime   @default(now())
}

model Category {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  createAt DateTime     @default(now())
  mentors  UserMentor[]
}

model Job {
  id         Int        @id @default(autoincrement())
  startDate  DateTime?
  endDate    DateTime?
  company    String
  position   String
  additional Json?
  mentor     UserMentor @relation(fields: [mentorId], references: [userId])
  mentorId   Int
}

model Achievement {
  id          Int        @id @default(autoincrement())
  mentorId    Int
  mentor      UserMentor @relation(fields: [mentorId], references: [userId])
  description String
  additional  Json?
}

model Skill {
  id          Int               @id @default(autoincrement())
  description String
  additional  Json?
  mentors     SkillsOnMentors[]
  isAccepted  Boolean           @default(false)
  createdAt   DateTime          @default(now())
}

model SkillsOnMentors {
  mentorId  Int
  mentor    UserMentor @relation(fields: [mentorId], references: [userId])
  skillId   Int
  skill     Skill      @relation(fields: [skillId], references: [id])
  createdAt DateTime   @default(now())

  @@id([mentorId, skillId])
}

enum Role {
  ADMIN
  USER
  MODERATOR
  MENTEE
  MENTOR
}
