// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  password           String
  name               String?
  role               Role              @default(MENTEE)
  birthday           DateTime?
  phone              String?
  avatar             String?
  isActive           Boolean           @default(false)
  coin               Int               @default(0)
  isPasswordSet      Boolean           @default(false)
  User_mentor        UserMentor?
  User_mentee        MenteeProfile?    @relation("mentee_profile")
  RegisterHistory    ProgramRegister[]
  transactions       UserTransaction[]
  onWishlist         MenteeProfile[]
  notified           Notification[]    @relation("nofify_notifier")
  actingNotification Notification[]    @relation("nofify_actor")
  activeCode         ActivationCode[]
  createAt           DateTime          @default(now())
}

model UserMentor {
  userId          Int               @id
  User            User              @relation(fields: [userId], references: [id])
  degree          Degree[]
  experiences     Experience[]
  linkedin        String?
  jobs            Job[]
  achievements    Achievement[]
  skills          SkillsOnMentors[]
  programs        Program[]
  categoryId      Int
  category        Category          @relation(fields: [categoryId], references: [id])
  introduction    String
  cv              String?
  featuredRatings Int[]
  rating          Decimal           @default(0)
  isAccepted      Boolean           @default(false)
  createAt        DateTime          @default(now())
}

model Experience {
  id          Int        @id @default(autoincrement())
  mentorId    Int
  mentor      UserMentor @relation(fields: [mentorId], references: [userId])
  title       String
  company     String
  description String?
  startAt     DateTime
  endAt       DateTime?
  createAt    DateTime   @default(now())
}

model Degree {
  id          Int        @id @default(autoincrement())
  mentorId    Int
  mentor      UserMentor @relation(fields: [mentorId], references: [userId])
  title       String
  issuer      String
  description String?
  degreeId    String?
  url         String?
  startAt     DateTime
  endAt       DateTime?
  expiredAt   DateTime?
  createAt    DateTime   @default(now())
}

model Category {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  createAt DateTime     @default(now())
  mentors  UserMentor[]
}

model Job {
  id         Int        @id @default(autoincrement())
  startDate  DateTime?
  endDate    DateTime?
  company    String
  position   String
  additional Json?
  mentor     UserMentor @relation(fields: [mentorId], references: [userId])
  mentorId   Int
}

model Achievement {
  id          Int        @id @default(autoincrement())
  mentorId    Int
  mentor      UserMentor @relation(fields: [mentorId], references: [userId])
  title       String     @default("")
  description String
  additional  Json?
}

model Skill {
  id          Int               @id @default(autoincrement())
  description String
  additional  Json?
  mentors     SkillsOnMentors[]
  isAccepted  Boolean           @default(false)
  createdAt   DateTime          @default(now())
}

model SkillsOnMentors {
  mentorId  Int
  mentor    UserMentor @relation(fields: [mentorId], references: [userId])
  skillId   Int
  skill     Skill      @relation(fields: [skillId], references: [id])
  createdAt DateTime   @default(now())

  @@id([mentorId, skillId])
}

model Program {
  id              Int               @id @default(autoincrement())
  mentorId        Int
  mentor          UserMentor        @relation(fields: [mentorId], references: [userId])
  title           String
  detail          String
  credit          Int
  programRegister ProgramRegister[]
  createAt        DateTime          @default(now())
}

model ProgramRegister {
  id           Int       @id @default(autoincrement())
  programId    Int
  program      Program   @relation(fields: [programId], references: [id])
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  isAccepted   Boolean   @default(false)
  done         Boolean   @default(false)
  contactInfo  String?
  additional   Json?
  expectedDate DateTime?
  rating       Rating?
  relatedId    String?
  createAt     DateTime  @default(now())
}

model Rating {
  id         Int             @id @default(autoincrement())
  registerId Int             @unique
  register   ProgramRegister @relation(fields: [registerId], references: [id])
  rating     Float           @default(0)
  comment    String?
  createAt   DateTime        @default(now())
}

model UserTransaction {
  id        Int               @id @default(autoincrement())
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  amount    Int               @default(0)
  type      TransactionType
  message   String            @default("")
  status    TransactionStatus @default(PENDING)
  relatedId String?
  createAt  DateTime          @default(now())
}

model GiftCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  type      String
  validFrom DateTime @default(now())
  validTo   DateTime
  valid     Boolean
  usageLeft Int      @default(1)
  coin      Int      @default(0)
  createAt  DateTime @default(now())
}

model MenteeProfile {
  id              Int    @id @default(autoincrement())
  userId          Int    @unique
  user            User   @relation(fields: [userId], references: [id], name: "mentee_profile")
  favoriteMentors User[]
}

model NotificationType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  createAt      DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Notification {
  id         Int              @id @default(autoincrement())
  typeId     Int
  type       NotificationType @relation(fields: [typeId], references: [id])
  actorId    Int // User that trigger the notification
  actor      User             @relation(fields: [actorId], references: [id], name: "nofify_actor")
  notifierId Int // User that receive the notification
  notifier   User             @relation(fields: [notifierId], references: [id], name: "nofify_notifier")
  message    String
  isRead     Boolean          @default(false)
  additional Json?
  createAt   DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model ActivationCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  userId    Int
  isUsed    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  expiredIn Int      @default(3600)
  createAt  DateTime @default(now())
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  HOLD
}

enum TransactionType {
  TOPUP
  WITHDRAW
  APPLY
  RECEIVE
  TRANSFER
}

enum Role {
  ADMIN
  USER
  MODERATOR
  MENTEE
  MENTOR
}
